// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PekoBot.Database;

namespace PekoBot.Database.Migrations
{
    [DbContext(typeof(PekoBotContext))]
    [Migration("20210112165222_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MemberUser", b =>
                {
                    b.Property<string>("MembersId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("MembersId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MemberUser");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuildId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Guild", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guild");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Live", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Notified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Platform")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Room")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Lives");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nicknames")
                        .HasColumnType("TEXT");

                    b.Property<string>("YoutubeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("GuildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mention")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("MemberId");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .HasColumnType("TEXT");

                    b.Property<string>("GuildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mention")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MemberUser", b =>
                {
                    b.HasOne("PekoBot.Entities.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PekoBot.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Channel", b =>
                {
                    b.HasOne("PekoBot.Entities.Models.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Live", b =>
                {
                    b.HasOne("PekoBot.Entities.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Member", b =>
                {
                    b.HasOne("PekoBot.Entities.Models.Company", "Company")
                        .WithMany("Members")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Role", b =>
                {
                    b.HasOne("PekoBot.Entities.Models.Guild", null)
                        .WithMany("Roles")
                        .HasForeignKey("GuildId");

                    b.HasOne("PekoBot.Entities.Models.Member", "Member")
                        .WithMany("Roles")
                        .HasForeignKey("MemberId");

                    b.HasOne("PekoBot.Entities.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.User", b =>
                {
                    b.HasOne("PekoBot.Entities.Models.Guild", "Guild")
                        .WithMany("Users")
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Company", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.Member", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PekoBot.Entities.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
